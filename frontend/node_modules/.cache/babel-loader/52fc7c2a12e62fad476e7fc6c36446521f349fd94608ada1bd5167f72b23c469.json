{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/12-adv-starting-project/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { json, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetail = () => {\n  _s();\n  const data = useRouteLoaderData(\"event-loader\");\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_s(EventDetail, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetail;\nexport default EventDetail;\nexport const loader = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.id;\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw json({\n      message: \"unable to fetch data for the selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventDetail\");","map":{"version":3,"names":["React","json","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","EventDetail","_s","data","console","log","Fragment","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","params","id","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/admin/Downloads/12-adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import React from \"react\";\nimport { json, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\n\nconst EventDetail = () => {\n  const data = useRouteLoaderData(\"event-loader\");\n  console.log(data);\n  return (\n    <React.Fragment>\n      <EventItem event={data.event} />\n    </React.Fragment>\n  );\n};\n\nexport default EventDetail;\n\nexport const loader = async ({ request, params }) => {\n  const id = params.id;\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw json(\n      { message: \"unable to fetch data for the selected event\" },\n      { status: 500 }\n    );\n  } else {\n    return response;\n  }\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC3D,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAC/CO,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,oBACEH,OAAA,CAACL,KAAK,CAACW,QAAQ;IAAAC,QAAA,eACbP,OAAA,CAACF,SAAS;MAACU,KAAK,EAAEL,IAAI,CAACK;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjB;AAErB,CAAC;AAACV,EAAA,CARID,WAAW;EAAA,QACFJ,kBAAkB;AAAA;AAAAgB,EAAA,GAD3BZ,WAAW;AAUjB,eAAeA,WAAW;AAE1B,OAAO,MAAMa,MAAM,GAAG,MAAAC,IAAA,IAA+B;EAAA,IAAxB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMG,EAAE,GAAGD,MAAM,CAACC,EAAE;EACpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,EAAG,EAAC,CAAC;EAClE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMzB,IAAI,CACR;MAAE0B,OAAO,EAAE;IAA8C,CAAC,EAC1D;MAAEC,MAAM,EAAE;IAAI,CAAC,CAChB;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAC,IAAAN,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}